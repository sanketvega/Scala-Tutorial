Scala has support for collections. Collections are containers of things. The number of elements could be either 0 or 1 or
more. Collections could be either strict or lazy. Lazy means elements donot consume memory until they are accessed.
Scala favors immutable collections although mutable versions are provided.  

If we want to modify a collection and operations on it are all within a single thread, choose mutable collection.
If collection needs to be used across threads or actors, immutables are better.

Another categorization of collections is ether they are mutable or immutable.

Example to define collections:

// Define List of integers.
val x = List(1,2,3,4)

// Define a set.
var x = Set(1,3,5,7)

// Define a map.
val x = Map("one" -> 1, "two" -> 2, "three" -> 3)

// Create a tuple of two elements.
val x = (10, "Scala")

// Define an option
val x:Option[Int] = Some(5)

Scala Lists:
Lists are similar to arrays but the key differnece lies in-
  List elements are immutable where as array elements are mutable.
  List represents a linked list whereas arrays are flat.
  
Defining a list:
// List of Strings
val fruit: List[String] = List("apples", "oranges", "pears")

// List of Integers
val nums: List[Int] = List(1, 2, 3, 4)

// Empty List.
val empty: List[Nothing] = List()

// Two dimensional list
val dim: List[List[Int]] =
   List(
      List(1, 0, 0),
      List(0, 1, 0),
      List(0, 0, 1)
      
      
Lists can also be defined using two fundamental blocks- Nil and ::
// List of Strings
val fruit = "apples" :: ("oranges" :: ("pears" :: Nil))

// List of Integers
val nums = 1 :: (2 :: (3 :: (4 :: Nil)))

// Empty List.
val empty = Nil
 
// Two dimensional list   // :: double colon for editing
val dim = (1 :: (0 :: (0 :: Nil))) ::
          (0 :: (1 :: (0 :: Nil))) ::                                   
          (0 :: (0 :: (1 :: Nil))) :: Nil
          
Basic Operations on List:
 val fruit = "apples" :: ("oranges" :: ("pears" :: Nil))
      val nums = Nil

      println( "Head of fruit : " + fruit.head )
      println( "Tail of fruit : " + fruit.tail )
      println( "Check if fruit is empty : " + fruit.isEmpty )
      println( "Check if nums is empty : " + nums.isEmpty )
      
Result:
Head of fruit : apples
Tail of fruit : List(oranges, pears)
Check if fruit is empty : false
Check if nums is empty : true

head -> this method returns first element of the list.
tail -> this method returns a list containing all elements except first.
isEmpty -> this method returns true if the list is empty and otherwise false.

Concatenating Lists:
Use either ::: or List.::: or List.concat() to concatenate two or more lists.
Example:
val fruit1 = "apples" :: ("oranges" :: ("pears" :: Nil))
val fruit2 = "mangoes" :: ("banana" :: Nil)

//concatenating lists
var fruit = fruit1 ::: fruit2
fruit = fruit1.:::(fruit2)
fruit = List.concat(fruit1, fruit2)

Creating Uniform Lists:
List.fill() creates a list consisting of zero or more copies of the same element.
Example:
val fruit = List.fill(3)("apples") // Repeats apples three times.
println( "fruit : " + fruit  )

Result:
fruit : List(apples, apples, apples)

Tabulating a function:
Use function along with List.tabulate() to apply on all the elements before tabulating the list. The first argument determines the 
dimesnions of the list to create, the second describes the elements of the list.

Example: //try this vega
val squares = List.tabulate(6)(n => n * n)
val mul = List.tabulate( 4,5 )( _ * _ )  //creates a 2d list where each element is a list containing 5 elements. The elements are computed as 
                                        product of respective indices that refer the element in the list.

Reverse List Order:
List.reverse reverses all elements of the list.

Example:
val fruit = "apples" :: ("oranges" :: ("pears" :: Nil))
println("After reverse fruit: "+ fruit.reverse);

Result:
After reverse fruit: List(pears, oranges, apples)

if we want to prefix an element, that is, place it in the front of the list,
we can use the special method :: ( ).

val list = List(1,2,3,4,5)
val prefixedList = 7 :: list
println("First Element in Prefixed"+prefixedList.head)

Append a list:
val appendList = list ::: List(3,4,5,6)


val feeds = List("blog.toolshed.com" , "pragdave.pragprog.com" ,
"dimsumthinking.com/blog" )
val prefixedList = "forums.pragprog.com/forums/87" :: feeds
val feedsWithForums =
feeds ::: List("forums.pragprog.com/forums/87" , "forums.pragprog.com/forums/55" )
val feedsWithForums =
feeds ::: List("forums.pragprog.com/forums/87" , "forums.pragprog.com/forums/55" )

println("Feeds with blog: " + feeds.filter( _ contains "blog" ).mkString(", " ))
println("All feeds have com: " + feeds.forall( _ contains "com" ))
println("All feeds have dave: " + feeds.forall( _ contains "dave" ))
println("Any feed has dave: " + feeds.exists( _ contains "dave" ))
println("Any feed has bill: " + feeds.exists( _ contains "bill" ))

Displaying the length of each feed name
println("Feed url lengths: " + feeds.map( _.length ).mkString(", " ))

foldLeft:
The foldLeft ( ) method will invoke the given function value (code block) for
each element in the list, starting from the left. It passes two parameters
to the function value. The first parameter is a partial result from the
execution of the function value for the previous element (which is why
itâ€™s called folding.

The second parameter is an element in the list. The
initial value for the partial result is provided as the parameter to the
method ( Zero in this example). The foldLeft ( ) method forms a chain of
elements and carries the partial result of computation in the function
value from one element to the next, starting from the left.

Similarly,
foldRight ( ) will do the same, starting at the right.
Example: val total = feeds.foldLeft(0) { (total, feed) => total + feed.length }
println("Total length of feed urls: " + total )


















